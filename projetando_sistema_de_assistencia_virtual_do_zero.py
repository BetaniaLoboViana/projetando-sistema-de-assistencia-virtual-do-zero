# -*- coding: utf-8 -*-
"""projetando sistema de assistencia virtual do zero.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dnfc6IhBePxGwK-kJCJE0_eapxUQLhhU
"""

!pip install pyttsx3 SpeechRecognition  wikipedia googlemaps
!pip install pipwin
!pipwin install pyaudio

 #biblioteca necess√°rias

!pip install gTTS

from gtts import gTTS
from IPython.display import Audio

# Fun√ß√£o para converter texto em fala
def text_to_speech(text):
    tts = gTTS(text=text, lang='pt')
    tts.save("output.mp3")

    # Reproduzir o √°udio gerado
    return Audio("output.mp3", autoplay=True)

# Testando
text_to_speech("Ol√°, estou funcionando muito bem obrigada! volte sempre!")

"""# Convers√£o de arquivos para formato WAV
Usar as pr√≥ximas c√©lulas para arquivos de √°udio que n√£o est√£o em formato wav.

"""

!apt-get install ffmpeg
!pip install pydub

from pydub import AudioSegment

# Carregar o arquivo m4a
audio = AudioSegment.from_file("/content/11 de fev. 14.18_.m4a")

# Converter para wav e salvar
audio.export("/content/audio_convertido.wav", format="wav")

"""# A partir daqui j√° voltamos aos m√©todos de convers√£o"""

import speech_recognition as sr

recognizer = sr.Recognizer()
audio_file = "/content/audio_convertido.wav"

with sr.AudioFile(audio_file) as source:
    audio = recognizer.record(source)

try:
    text = recognizer.recognize_google(audio, language="pt-BR")
    print(f"Voc√™ disse: {text}")
except sr.UnknownValueError:
    print("N√£o consegui entender o √°udio")
except sr.RequestError:
    print("Erro ao se conectar ao servi√ßo de reconhecimento de fala")

import wikipedia
from gtts import gTTS
import IPython.display as ipd

# Configura√ß√£o da l√≠ngua para portugu√™s
wikipedia.set_lang("pt")

def text_to_speech(text):
    # Converte texto em fala e reproduz automaticamente
    tts = gTTS(text=text, lang="pt")
    tts.save("fala.mp3")
    return ipd.Audio("fala.mp3", autoplay=True)

def search_wikipedia(query):
    # Pesquisar na Wikip√©dia e ler o resumo
    try:
        result = wikipedia.summary(query, sentences=2)
        print(result)  # Exibe o resumo no console
        ipd.display(text_to_speech(result))
    except wikipedia.exceptions.DisambiguationError:
        ipd.display(text_to_speech("Desculpe, houve uma ambiguidade na pesquisa. Tente ser mais espec√≠fico."))
    except wikipedia.exceptions.HTTPTimeoutError:
        ipd.display(text_to_speech("Houve um erro na conex√£o com a Wikip√©dia."))

# Teste
search_wikipedia("Darwin Nunez")

import webbrowser

def open_youtube(query):
    search_url = f"https://www.youtube.com/results?search_query={query}"
    print(f"üîó Clique no link para abrir o YouTube: {search_url}")
    webbrowser.open(search_url, new=2)

# Teste
open_youtube("Python programa√ß√£o")

"""# Instalando geopy para busca de locais"""

!pip install geopy requests

!pip install geopy requests
from geopy.geocoders import Nominatim
import requests

def find_pharmacy(location):
    # Geocodifica√ß√£o para obter latitude e longitude da localiza√ß√£o
    geolocator = Nominatim(user_agent="pharmacy_locator")
    location = geolocator.geocode(location)

    if location:
        lat = location.latitude
        lon = location.longitude
        print(f"Localiza√ß√£o encontrada: {location.address} ({lat}, {lon})")

        # Consulta √† Overpass API para buscar farm√°cias nas proximidades
        overpass_url = f"http://overpass-api.de/api/interpreter?data=[out:json];(node['amenity'='pharmacy'](around:5000,{lat},{lon}););out;"
        response = requests.get(overpass_url)
        pharmacy_data = response.json()

        if pharmacy_data['elements']:
            pharmacy = pharmacy_data['elements'][0]  # Pega a primeira farm√°cia encontrada
            pharmacy_name = pharmacy.get('tags', {}).get('name', 'Farm√°cia desconhecida')
            pharmacy_address = f"Lat: {pharmacy['lat']}, Lon: {pharmacy['lon']}"
            print(f"A farm√°cia mais pr√≥xima √© {pharmacy_name} localizada em {pharmacy_address}")
        else:
            print("N√£o encontrei nenhuma farm√°cia nas proximidades.")
    else:
        print("N√£o foi poss√≠vel encontrar a localiza√ß√£o fornecida.")

# Testando a fun√ß√£o com um endere√ßo ou nome de lugar
find_pharmacy("Bel√©m - Par√°")

"""# Integrando tudo"""

# Instalar depend√™ncias necess√°rias
!pip install gTTS pydub geopy requests wikipedia

# Importando as bibliotecas necess√°rias
import wikipedia
import webbrowser
from gtts import gTTS
from IPython.display import Audio
import speech_recognition as sr
from geopy.geocoders import Nominatim
import requests
from pydub import AudioSegment

# Fun√ß√£o para converter texto em fala
def text_to_speech(text):
    tts = gTTS(text=text, lang='pt')
    tts.save("output.mp3")
    return Audio("output.mp3", autoplay=True)

# Fun√ß√£o para reconhecer √°udio e converter em texto (para microfone ou arquivo de √°udio)
def speech_to_text(audio_file=None):
    recognizer = sr.Recognizer()

    if audio_file:  # Caso esteja usando um arquivo de √°udio
        try:
            with sr.AudioFile(audio_file) as source:
                print("Carregando √°udio...")
                audio = recognizer.record(source)
            text = recognizer.recognize_google(audio, language="pt-BR")
            print(f"Voc√™ disse: {text}")
            return text.lower()
        except sr.UnknownValueError:
            print("N√£o consegui entender o √°udio.")
            return ""
        except sr.RequestError:
            print("Erro ao se conectar ao servi√ßo de reconhecimento de fala.")
            return ""

    else:  # Caso esteja usando o microfone
        with sr.Microphone() as source:
            print("Aguardando comando de voz...")
            audio = recognizer.listen(source)

        try:
            text = recognizer.recognize_google(audio, language="pt-BR")
            print(f"Voc√™ disse: {text}")
            return text.lower()
        except sr.UnknownValueError:
            print("N√£o consegui entender o √°udio.")
            return ""
        except sr.RequestError:
            print("Erro ao se conectar ao servi√ßo de reconhecimento de fala.")
            return ""

# Fun√ß√£o para pesquisar no Wikipedia
def search_wikipedia(query):
    try:
        result = wikipedia.summary(query, sentences=2)
        print(result)  # Exibe o resumo no console
        text_to_speech(result)
    except wikipedia.exceptions.DisambiguationError:
        text_to_speech("Desculpe, houve uma ambiguidade na pesquisa. Tente ser mais espec√≠fico.")
    except wikipedia.exceptions.HTTPTimeoutError:
        text_to_speech("Houve um erro na conex√£o com a Wikip√©dia.")

# Fun√ß√£o para abrir o YouTube
def open_youtube(query):
    search_url = f"https://www.youtube.com/results?search_query={query}"
    print(f"üîó Clique no link para abrir o YouTube: {search_url}")
    webbrowser.open(search_url, new=2)
    text_to_speech(f"Abrindo YouTube para {query}")

# Fun√ß√£o para encontrar farm√°cias pr√≥ximas
def find_pharmacy(location):
    geolocator = Nominatim(user_agent="pharmacy_locator")
    location = geolocator.geocode(location)

    if location:
        lat = location.latitude
        lon = location.longitude
        print(f"Localiza√ß√£o encontrada: {location.address} ({lat}, {lon})")

        # Consulta √† Overpass API para buscar farm√°cias nas proximidades
        overpass_url = f"http://overpass-api.de/api/interpreter?data=[out:json];(node['amenity'='pharmacy'](around:5000,{lat},{lon}););out;"
        response = requests.get(overpass_url)
        pharmacy_data = response.json()

        if pharmacy_data['elements']:
            pharmacy = pharmacy_data['elements'][0]
            pharmacy_name = pharmacy.get('tags', {}).get('name', 'Farm√°cia desconhecida')
            pharmacy_address = f"Lat: {pharmacy['lat']}, Lon: {pharmacy['lon']}"
            print(f"A farm√°cia mais pr√≥xima √© {pharmacy_name} localizada em {pharmacy_address}")
            text_to_speech(f"A farm√°cia mais pr√≥xima √© {pharmacy_name} localizada em {pharmacy_address}")
        else:
            print("N√£o encontrei nenhuma farm√°cia nas proximidades.")
            text_to_speech("N√£o encontrei nenhuma farm√°cia nas proximidades.")
    else:
        print("N√£o foi poss√≠vel encontrar a localiza√ß√£o fornecida.")
        text_to_speech("N√£o foi poss√≠vel encontrar a localiza√ß√£o fornecida.")

# Fun√ß√£o principal para ouvir e executar os comandos de voz
def main():
    text_to_speech("Assistente ativado. Como posso ajudar?")
    while True:
        print("Aguardando comando de voz...")
        command = speech_to_text()  # Usando o microfone por padr√£o

        if 'pesquisar' in command:
            text_to_speech("Por favor, diga o que deseja pesquisar na Wikipedia.")
            query = speech_to_text()  # Obt√©m o termo de pesquisa do usu√°rio
            search_wikipedia(query)

        elif 'youtube' in command:
            text_to_speech("Por favor, diga o que deseja buscar no YouTube.")
            query = speech_to_text()  # Obt√©m o termo para busca no YouTube
            open_youtube(query)

        elif 'farm√°cia' in command:
            text_to_speech("Por favor, diga sua localiza√ß√£o para encontrar farm√°cias nas proximidades.")
            location = speech_to_text()  # Obt√©m a localiza√ß√£o do usu√°rio
            find_pharmacy(location)

        elif 'sair' in command:
            text_to_speech("At√© logo!")
            print("Saindo...")
            break  # Sai do loop e encerra o assistente

        else:
            text_to_speech("Desculpe, n√£o entendi o comando. Tente novamente.")

# Executar o assistente
main()

